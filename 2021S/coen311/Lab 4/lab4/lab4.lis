     1                                  ; Andre Hei Wang Law 
     2                                  ; 4017 5600
     3                                  ; Program: Lower-case into upper-case converter
     4                                  
     5                                  section .data
     6 00000000 6A754D70696E67204A-     _mes	db	'juMping JAck flaSh #1',10,0
     6 00000009 41636B20666C615368-
     6 00000012 2023310A00         
     7                                  
     8                                  section .text
     9                                  	global _start
    10                                  _start:
    11 00000000 B804000000              _print_before:	mov eax, 4	; system call for write
    12 00000005 BB01000000              		mov ebx, 1	; file descriptor 1 - standard output
    13 0000000A B9[00000000]            		mov ecx, _mes	; put the address into ECX
    14 0000000F BA16000000              		mov edx, 22	; 22 total characters
    15 00000014 CD80                    		int 80h		; calls the interrupt
    16                                  
    17 00000016 BE00000000              	mov esi, 0		; assign 0 into ESI
    18 0000001B BD[00000000]            	mov ebp, _mes		; array _mes into ebp
    19 00000020 8A443500                _top:	mov al, [ebp + esi]	; direct first element
    20 00000024 3C00                    	cmp al, 0		; compare if al = 0
    21 00000026 7411                    	je _exit_loop		; if yes, exit loop
    22                                  
    23 00000028 3C61                    		cmp al, 'a'	; compare if al < 'a'
    24 0000002A 7C0A                    		jl _next	; if yes, jump to _next
    25 0000002C 3C7A                    		cmp al, 'z'	; compare if al > 'z'
    26 0000002E 7F06                    		jg _next	; if yes, jump to _next
    27 00000030 2C20                    		sub al, 32	; substract al by 32 (upper-case)
    28 00000032 88443500                		mov [ebp + esi], al	; replace lower by new upper
    29                                  
    30 00000036 46                      	_next:	inc esi		; increase counter/pointer
    31 00000037 EBE7                    		jmp _top	; jump to continue loop
    32                                  _exit_loop:
    33 00000039 B804000000              _print_after:	mov eax, 4	; system call for write
    34 0000003E BB01000000              		mov ebx, 1	; file descriptor 1- standard output
    35 00000043 B9[00000000]            		mov ecx, _mes	; put the address into ECX
    36 00000048 BA16000000              		mov edx, 22	; 22 total characters
    37 0000004D CD80                    		int 80h		; calls the interrupt
    38                                  
    39 0000004F B801000000              _exit:	mov eax, 1		; system call for exit
    40 00000054 BB00000000              	mov ebx, 0		; exit w/ return code of 0
    41 00000059 CD80                    	int 80h
