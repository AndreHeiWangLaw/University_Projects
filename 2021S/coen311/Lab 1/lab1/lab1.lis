     1                                  	; Name: Andre Hei Wang Law
     2                                  	; STD:
     3                                  	; Email: heiwangandrelaw128@gmail.com
     4                                  	; Section: AL-X
     5                                  	; Date: 2021-05-27
     6                                  
     7                                  section .data	; Data segment
     8                                  			; put your data in this section using
     9                                  			; db, dw, dd directions
    10                                  			; this program has nothing in the .data section
    11                                  
    12                                  section .bss	; Uninitialized data segment
    13                                  
    14                                  			; put UNINITALIZED data here using resb, resw, resd
    15                                  			; this program has nothing in the .bss section
    16                                  
    17                                  
    18                                  section .text	; Code segment
    19                                  
    20                                  	global _start	; Must be declared for linker (ld)
    21                                  _start:			; tells linker entry point
    22                                  
    23 00000000 66B80500                	mov ax,5	; store 5 into the ax register
    24 00000004 66BB0200                keith:	mov bx,2	; store 2 into the bx register
    25 00000008 6601D8                  	add ax,bx	; ax = ax + bx
    26                                  			; contents of register bx is added to the
    27                                  			; original contents of register ax and the
    28                                  			; result is stored in register ax (overwriting
    29                                  			; the original content)
    30                                  end_of_program:
    31 0000000B B801000000              	mov eax,1	; the system call for exit (sys_exit)
    32 00000010 BB00000000              	mov ebx,0	; exit with return code of 0 (no error)
    33 00000015 CD80                    	int 80h		; call the kernel to call the relevant interrupt (80h)
    34                                  			; end of program
